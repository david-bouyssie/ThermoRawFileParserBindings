/**
 * ----------------------------------------------------------------------------
 * <auto-generated>
 * This is autogenerated code by Embeddinator-4000.
 * Do not edit this file or all your changes will be lost after re-generation.
 * </auto-generated>
 * ----------------------------------------------------------------------------
 */
package thermorawfileparser.thermorawfileparser.writer.mzml;

import mono.embeddinator.*;
import com.sun.jna.*;

public class RunType extends thermorawfileparser.thermorawfileparser.writer.mzml.ParamGroupType {
    public RunType(com.sun.jna.Pointer object) { super(object); }

    public RunType() {
        super((com.sun.jna.Pointer)null);
        __object = thermorawfileparser.Native_ThermoRawFileParser.INSTANCE.ThermoRawFileParser_Writer_MzML_RunType_new();
        mono.embeddinator.Runtime.checkExceptions();
    }

    public thermorawfileparser.thermorawfileparser.writer.mzml.SpectrumListType getspectrumList() {
        com.sun.jna.Pointer __ret = thermorawfileparser.Native_ThermoRawFileParser.INSTANCE.ThermoRawFileParser_Writer_MzML_RunType_get_spectrumList(__object);
        mono.embeddinator.Runtime.checkExceptions();
        return (__ret == com.sun.jna.Pointer.NULL ? null : new thermorawfileparser.thermorawfileparser.writer.mzml.SpectrumListType(__ret));
    }

    public void setspectrumList(thermorawfileparser.thermorawfileparser.writer.mzml.SpectrumListType value) {
        thermorawfileparser.Native_ThermoRawFileParser.INSTANCE.ThermoRawFileParser_Writer_MzML_RunType_set_spectrumList(__object, value == null ? null : value.__object);
        mono.embeddinator.Runtime.checkExceptions();
    }

    public thermorawfileparser.thermorawfileparser.writer.mzml.ChromatogramListType getchromatogramList() {
        com.sun.jna.Pointer __ret = thermorawfileparser.Native_ThermoRawFileParser.INSTANCE.ThermoRawFileParser_Writer_MzML_RunType_get_chromatogramList(__object);
        mono.embeddinator.Runtime.checkExceptions();
        return (__ret == com.sun.jna.Pointer.NULL ? null : new thermorawfileparser.thermorawfileparser.writer.mzml.ChromatogramListType(__ret));
    }

    public void setchromatogramList(thermorawfileparser.thermorawfileparser.writer.mzml.ChromatogramListType value) {
        thermorawfileparser.Native_ThermoRawFileParser.INSTANCE.ThermoRawFileParser_Writer_MzML_RunType_set_chromatogramList(__object, value == null ? null : value.__object);
        mono.embeddinator.Runtime.checkExceptions();
    }

    public java.lang.String getid() {
        java.lang.String __ret = thermorawfileparser.Native_ThermoRawFileParser.INSTANCE.ThermoRawFileParser_Writer_MzML_RunType_get_id(__object);
        mono.embeddinator.Runtime.checkExceptions();
        return __ret;
    }

    public void setid(java.lang.String value) {
        thermorawfileparser.Native_ThermoRawFileParser.INSTANCE.ThermoRawFileParser_Writer_MzML_RunType_set_id(__object, value);
        mono.embeddinator.Runtime.checkExceptions();
    }

    public java.lang.String getdefaultInstrumentConfigurationRef() {
        java.lang.String __ret = thermorawfileparser.Native_ThermoRawFileParser.INSTANCE.ThermoRawFileParser_Writer_MzML_RunType_get_defaultInstrumentConfigurationRef(__object);
        mono.embeddinator.Runtime.checkExceptions();
        return __ret;
    }

    public void setdefaultInstrumentConfigurationRef(java.lang.String value) {
        thermorawfileparser.Native_ThermoRawFileParser.INSTANCE.ThermoRawFileParser_Writer_MzML_RunType_set_defaultInstrumentConfigurationRef(__object, value);
        mono.embeddinator.Runtime.checkExceptions();
    }

    public java.lang.String getdefaultSourceFileRef() {
        java.lang.String __ret = thermorawfileparser.Native_ThermoRawFileParser.INSTANCE.ThermoRawFileParser_Writer_MzML_RunType_get_defaultSourceFileRef(__object);
        mono.embeddinator.Runtime.checkExceptions();
        return __ret;
    }

    public void setdefaultSourceFileRef(java.lang.String value) {
        thermorawfileparser.Native_ThermoRawFileParser.INSTANCE.ThermoRawFileParser_Writer_MzML_RunType_set_defaultSourceFileRef(__object, value);
        mono.embeddinator.Runtime.checkExceptions();
    }

    public java.lang.String getsampleRef() {
        java.lang.String __ret = thermorawfileparser.Native_ThermoRawFileParser.INSTANCE.ThermoRawFileParser_Writer_MzML_RunType_get_sampleRef(__object);
        mono.embeddinator.Runtime.checkExceptions();
        return __ret;
    }

    public void setsampleRef(java.lang.String value) {
        thermorawfileparser.Native_ThermoRawFileParser.INSTANCE.ThermoRawFileParser_Writer_MzML_RunType_set_sampleRef(__object, value);
        mono.embeddinator.Runtime.checkExceptions();
    }

    public boolean getstartTimeStampSpecified() {
        byte __ret = thermorawfileparser.Native_ThermoRawFileParser.INSTANCE.ThermoRawFileParser_Writer_MzML_RunType_get_startTimeStampSpecified(__object);
        mono.embeddinator.Runtime.checkExceptions();
        return __ret != 0;
    }

    public void setstartTimeStampSpecified(boolean value) {
        thermorawfileparser.Native_ThermoRawFileParser.INSTANCE.ThermoRawFileParser_Writer_MzML_RunType_set_startTimeStampSpecified(__object, (byte)(value? 1 : 0));
        mono.embeddinator.Runtime.checkExceptions();
    }
}
