/**
 * ----------------------------------------------------------------------------
 * <auto-generated>
 * This is autogenerated code by Embeddinator-4000.
 * Do not edit this file or all your changes will be lost after re-generation.
 * </auto-generated>
 * ----------------------------------------------------------------------------
 */
package thermorawfileparser.thermorawfileparser;

import mono.embeddinator.*;
import com.sun.jna.*;

public final class OutputFormat {
    public static final OutputFormat MGF = new OutputFormat((int)0);
    public static final OutputFormat MzML = new OutputFormat((int)1);
    public static final OutputFormat IndexMzML = new OutputFormat((int)2);
    public static final OutputFormat Parquet = new OutputFormat((int)3);
    public static final OutputFormat NONE = new OutputFormat((int)4);

    private final int id;
    OutputFormat(int id) { this.id = id; }
    public int getValue() { return id; }

    public static OutputFormat fromOrdinal(int n) {
        return valuesMap.containsKey(n) ? valuesMap.get(n) : new OutputFormat(n);
    }

    private static final java.util.Map<Integer, OutputFormat> valuesMap = 
        new java.util.HashMap<Integer, OutputFormat>();

    static {
        try {
            java.lang.reflect.Field[] constants = OutputFormat.class.getFields();
            for (final java.lang.reflect.Field field : constants) {
                OutputFormat item = (OutputFormat) field.get(null);
                valuesMap.put(item.getValue(), item);
            }
        } catch(java.lang.IllegalAccessException ex) {
        }
    }
}
