/**
 * ----------------------------------------------------------------------------
 * <auto-generated>
 * This is autogenerated code by Embeddinator-4000.
 * Do not edit this file or all your changes will be lost after re-generation.
 * </auto-generated>
 * ----------------------------------------------------------------------------
 */
package thermorawfileparser.thermorawfileparser;

import mono.embeddinator.*;
import com.sun.jna.*;

public class ParseInput {
    public com.sun.jna.Pointer __object;

    public ParseInput(com.sun.jna.Pointer object) { this.__object = object; }

    public ParseInput() {
        __object = thermorawfileparser.Native_ThermoRawFileParser.INSTANCE.ThermoRawFileParser_ParseInput_new();
        mono.embeddinator.Runtime.checkExceptions();
    }

    public ParseInput(java.lang.String rawFilePath, java.lang.String rawDirectoryPath, java.lang.String outputDirectory, thermorawfileparser.thermorawfileparser.OutputFormat outputFormat) {
        int __outputFormat = outputFormat.getValue();
        __object = thermorawfileparser.Native_ThermoRawFileParser.INSTANCE.ThermoRawFileParser_ParseInput_new_1(rawFilePath, rawDirectoryPath, outputDirectory, __outputFormat);
        mono.embeddinator.Runtime.checkExceptions();
    }

    public void initializeS3Bucket() {
        thermorawfileparser.Native_ThermoRawFileParser.INSTANCE.ThermoRawFileParser_ParseInput_InitializeS3Bucket(__object);
        mono.embeddinator.Runtime.checkExceptions();
    }

    public java.lang.String getRawDirectoryPath() {
        java.lang.String __ret = thermorawfileparser.Native_ThermoRawFileParser.INSTANCE.ThermoRawFileParser_ParseInput_get_RawDirectoryPath(__object);
        mono.embeddinator.Runtime.checkExceptions();
        return __ret;
    }

    public void setRawDirectoryPath(java.lang.String value) {
        thermorawfileparser.Native_ThermoRawFileParser.INSTANCE.ThermoRawFileParser_ParseInput_set_RawDirectoryPath(__object, value);
        mono.embeddinator.Runtime.checkExceptions();
    }

    public java.lang.String getRawFilePath() {
        java.lang.String __ret = thermorawfileparser.Native_ThermoRawFileParser.INSTANCE.ThermoRawFileParser_ParseInput_get_RawFilePath(__object);
        mono.embeddinator.Runtime.checkExceptions();
        return __ret;
    }

    public void setRawFilePath(java.lang.String value) {
        thermorawfileparser.Native_ThermoRawFileParser.INSTANCE.ThermoRawFileParser_ParseInput_set_RawFilePath(__object, value);
        mono.embeddinator.Runtime.checkExceptions();
    }

    public boolean getUseInMemoryWriter() {
        byte __ret = thermorawfileparser.Native_ThermoRawFileParser.INSTANCE.ThermoRawFileParser_ParseInput_get_UseInMemoryWriter(__object);
        mono.embeddinator.Runtime.checkExceptions();
        return __ret != 0;
    }

    public void setUseInMemoryWriter(boolean value) {
        thermorawfileparser.Native_ThermoRawFileParser.INSTANCE.ThermoRawFileParser_ParseInput_set_UseInMemoryWriter(__object, (byte)(value? 1 : 0));
        mono.embeddinator.Runtime.checkExceptions();
    }

    public java.lang.String getOutputDirectory() {
        java.lang.String __ret = thermorawfileparser.Native_ThermoRawFileParser.INSTANCE.ThermoRawFileParser_ParseInput_get_OutputDirectory(__object);
        mono.embeddinator.Runtime.checkExceptions();
        return __ret;
    }

    public void setOutputDirectory(java.lang.String value) {
        thermorawfileparser.Native_ThermoRawFileParser.INSTANCE.ThermoRawFileParser_ParseInput_set_OutputDirectory(__object, value);
        mono.embeddinator.Runtime.checkExceptions();
    }

    public java.lang.String getOutputFile() {
        java.lang.String __ret = thermorawfileparser.Native_ThermoRawFileParser.INSTANCE.ThermoRawFileParser_ParseInput_get_OutputFile(__object);
        mono.embeddinator.Runtime.checkExceptions();
        return __ret;
    }

    public void setOutputFile(java.lang.String value) {
        thermorawfileparser.Native_ThermoRawFileParser.INSTANCE.ThermoRawFileParser_ParseInput_set_OutputFile(__object, value);
        mono.embeddinator.Runtime.checkExceptions();
    }

    public thermorawfileparser.thermorawfileparser.OutputFormat getOutputFormat() {
        int __ret = thermorawfileparser.Native_ThermoRawFileParser.INSTANCE.ThermoRawFileParser_ParseInput_get_OutputFormat(__object);
        mono.embeddinator.Runtime.checkExceptions();
        return thermorawfileparser.thermorawfileparser.OutputFormat.fromOrdinal(__ret);
    }

    public void setOutputFormat(thermorawfileparser.thermorawfileparser.OutputFormat value) {
        int __value = value.getValue();
        thermorawfileparser.Native_ThermoRawFileParser.INSTANCE.ThermoRawFileParser_ParseInput_set_OutputFormat(__object, __value);
        mono.embeddinator.Runtime.checkExceptions();
    }

    public thermorawfileparser.thermorawfileparser.MetadataFormat getMetadataFormat() {
        int __ret = thermorawfileparser.Native_ThermoRawFileParser.INSTANCE.ThermoRawFileParser_ParseInput_get_MetadataFormat(__object);
        mono.embeddinator.Runtime.checkExceptions();
        return thermorawfileparser.thermorawfileparser.MetadataFormat.fromOrdinal(__ret);
    }

    public void setMetadataFormat(thermorawfileparser.thermorawfileparser.MetadataFormat value) {
        int __value = value.getValue();
        thermorawfileparser.Native_ThermoRawFileParser.INSTANCE.ThermoRawFileParser_ParseInput_set_MetadataFormat(__object, __value);
        mono.embeddinator.Runtime.checkExceptions();
    }

    public java.lang.String getMetadataOutputFile() {
        java.lang.String __ret = thermorawfileparser.Native_ThermoRawFileParser.INSTANCE.ThermoRawFileParser_ParseInput_get_MetadataOutputFile(__object);
        mono.embeddinator.Runtime.checkExceptions();
        return __ret;
    }

    public void setMetadataOutputFile(java.lang.String value) {
        thermorawfileparser.Native_ThermoRawFileParser.INSTANCE.ThermoRawFileParser_ParseInput_set_MetadataOutputFile(__object, value);
        mono.embeddinator.Runtime.checkExceptions();
    }

    public boolean getGzip() {
        byte __ret = thermorawfileparser.Native_ThermoRawFileParser.INSTANCE.ThermoRawFileParser_ParseInput_get_Gzip(__object);
        mono.embeddinator.Runtime.checkExceptions();
        return __ret != 0;
    }

    public void setGzip(boolean value) {
        thermorawfileparser.Native_ThermoRawFileParser.INSTANCE.ThermoRawFileParser_ParseInput_set_Gzip(__object, (byte)(value? 1 : 0));
        mono.embeddinator.Runtime.checkExceptions();
    }

    public boolean getNoPeakPicking() {
        byte __ret = thermorawfileparser.Native_ThermoRawFileParser.INSTANCE.ThermoRawFileParser_ParseInput_get_NoPeakPicking(__object);
        mono.embeddinator.Runtime.checkExceptions();
        return __ret != 0;
    }

    public void setNoPeakPicking(boolean value) {
        thermorawfileparser.Native_ThermoRawFileParser.INSTANCE.ThermoRawFileParser_ParseInput_set_NoPeakPicking(__object, (byte)(value? 1 : 0));
        mono.embeddinator.Runtime.checkExceptions();
    }

    public boolean getNoZlibCompression() {
        byte __ret = thermorawfileparser.Native_ThermoRawFileParser.INSTANCE.ThermoRawFileParser_ParseInput_get_NoZlibCompression(__object);
        mono.embeddinator.Runtime.checkExceptions();
        return __ret != 0;
    }

    public void setNoZlibCompression(boolean value) {
        thermorawfileparser.Native_ThermoRawFileParser.INSTANCE.ThermoRawFileParser_ParseInput_set_NoZlibCompression(__object, (byte)(value? 1 : 0));
        mono.embeddinator.Runtime.checkExceptions();
    }

    public thermorawfileparser.thermorawfileparser.LogFormat getLogFormat() {
        int __ret = thermorawfileparser.Native_ThermoRawFileParser.INSTANCE.ThermoRawFileParser_ParseInput_get_LogFormat(__object);
        mono.embeddinator.Runtime.checkExceptions();
        return thermorawfileparser.thermorawfileparser.LogFormat.fromOrdinal(__ret);
    }

    public void setLogFormat(thermorawfileparser.thermorawfileparser.LogFormat value) {
        int __value = value.getValue();
        thermorawfileparser.Native_ThermoRawFileParser.INSTANCE.ThermoRawFileParser_ParseInput_set_LogFormat(__object, __value);
        mono.embeddinator.Runtime.checkExceptions();
    }

    public boolean getIgnoreInstrumentErrors() {
        byte __ret = thermorawfileparser.Native_ThermoRawFileParser.INSTANCE.ThermoRawFileParser_ParseInput_get_IgnoreInstrumentErrors(__object);
        mono.embeddinator.Runtime.checkExceptions();
        return __ret != 0;
    }

    public void setIgnoreInstrumentErrors(boolean value) {
        thermorawfileparser.Native_ThermoRawFileParser.INSTANCE.ThermoRawFileParser_ParseInput_set_IgnoreInstrumentErrors(__object, (byte)(value? 1 : 0));
        mono.embeddinator.Runtime.checkExceptions();
    }

    private thermorawfileparser.thermorawfileparser.writer.S3Loader getS3Loader() {
        com.sun.jna.Pointer __ret = thermorawfileparser.Native_ThermoRawFileParser.INSTANCE.ThermoRawFileParser_ParseInput_get_S3Loader(__object);
        mono.embeddinator.Runtime.checkExceptions();
        return (__ret == com.sun.jna.Pointer.NULL ? null : new thermorawfileparser.thermorawfileparser.writer.S3Loader(__ret));
    }

    private void setS3Loader(thermorawfileparser.thermorawfileparser.writer.S3Loader value) {
        thermorawfileparser.Native_ThermoRawFileParser.INSTANCE.ThermoRawFileParser_ParseInput_set_S3Loader(__object, value == null ? null : value.__object);
        mono.embeddinator.Runtime.checkExceptions();
    }

    public java.lang.String getS3AccessKeyId() {
        java.lang.String __ret = thermorawfileparser.Native_ThermoRawFileParser.INSTANCE.ThermoRawFileParser_ParseInput_get_S3AccessKeyId(__object);
        mono.embeddinator.Runtime.checkExceptions();
        return __ret;
    }

    public void setS3AccessKeyId(java.lang.String value) {
        thermorawfileparser.Native_ThermoRawFileParser.INSTANCE.ThermoRawFileParser_ParseInput_set_S3AccessKeyId(__object, value);
        mono.embeddinator.Runtime.checkExceptions();
    }

    public java.lang.String getS3SecretAccessKey() {
        java.lang.String __ret = thermorawfileparser.Native_ThermoRawFileParser.INSTANCE.ThermoRawFileParser_ParseInput_get_S3SecretAccessKey(__object);
        mono.embeddinator.Runtime.checkExceptions();
        return __ret;
    }

    public void setS3SecretAccessKey(java.lang.String value) {
        thermorawfileparser.Native_ThermoRawFileParser.INSTANCE.ThermoRawFileParser_ParseInput_set_S3SecretAccessKey(__object, value);
        mono.embeddinator.Runtime.checkExceptions();
    }

    public java.lang.String getS3Url() {
        java.lang.String __ret = thermorawfileparser.Native_ThermoRawFileParser.INSTANCE.ThermoRawFileParser_ParseInput_get_S3Url(__object);
        mono.embeddinator.Runtime.checkExceptions();
        return __ret;
    }

    public void setS3Url(java.lang.String value) {
        thermorawfileparser.Native_ThermoRawFileParser.INSTANCE.ThermoRawFileParser_ParseInput_set_S3Url(__object, value);
        mono.embeddinator.Runtime.checkExceptions();
    }

    public java.lang.String getBucketName() {
        java.lang.String __ret = thermorawfileparser.Native_ThermoRawFileParser.INSTANCE.ThermoRawFileParser_ParseInput_get_BucketName(__object);
        mono.embeddinator.Runtime.checkExceptions();
        return __ret;
    }

    public void setBucketName(java.lang.String value) {
        thermorawfileparser.Native_ThermoRawFileParser.INSTANCE.ThermoRawFileParser_ParseInput_set_BucketName(__object, value);
        mono.embeddinator.Runtime.checkExceptions();
    }

    public java.lang.String getRawFileNameWithoutExtension() {
        java.lang.String __ret = thermorawfileparser.Native_ThermoRawFileParser.INSTANCE.ThermoRawFileParser_ParseInput_get_RawFileNameWithoutExtension(__object);
        mono.embeddinator.Runtime.checkExceptions();
        return __ret;
    }

    private void setRawFileNameWithoutExtension(java.lang.String value) {
        thermorawfileparser.Native_ThermoRawFileParser.INSTANCE.ThermoRawFileParser_ParseInput_set_RawFileNameWithoutExtension(__object, value);
        mono.embeddinator.Runtime.checkExceptions();
    }
}
